import configure
import python_qiwi
from datetime import datetime, timedelta
import time
from ucBrowser import createBrowserUC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import re
from binance.client import Client
from supportFunctions import getMonthNumber


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã TINKOFF [–í –†–ê–ë–û–¢–ï üößÔ∏è]
def checkTinkoff(user, price):  # –í –†–ê–ó–†–ê–ë–û–¢–ö–ï

    driver = createBrowserUC(enableProxy=False)
    driver.get("https://www.tinkoff.ru/events/feed/")  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π Tinkoff

    # time.sleep(10)

    input('next?')

    page = driver.page_source
    page = BeautifulSoup(page, 'lxml')
    print(page)

    driver.close()
    driver.quit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã SBER [‚úÖ]
def checkSber(user, price):

    start_time = datetime.now()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    # –í—Ö–æ–¥ —Å –°–ë–ï–†–ë–ê–ù–ö –û–ù–õ–ê–ô–ù
    driver = createBrowserUC(enableProxy=False)
    driver.get("https://online.sberbank.ru/")  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –õ–ö –°–±–µ—Ä–±–∞–Ω–∫

    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(("xpath", '//button[@data-testid="button-continue"]')))  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞

    driver.find_element('xpath', '//input[@name="login"]').send_keys(configure.sber_login)  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –õ–û–ì–ò–ù–ê
    time.sleep(1)

    driver.find_element('xpath', '//input[@name="password"]').send_keys(configure.sber_password)  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ü–ê–†–û–õ–Ø
    time.sleep(1)

    driver.find_element('xpath', '//button[@data-testid="button-continue"]').click()  # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞

    if len(driver.find_elements('xpath', '//h2[@data-testid="stage-subheader"]')) != 0:  # –ü—Ä–æ–ø—É—Å–∫ –ª–∏—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
        driver.find_element('xpath', '//button[@data-testid="button-skip"]').click()

    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(("xpath", '//span[@class="scaffold__region-header-link-full"]')))  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    time.sleep(5)

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    formatted_price = "{:,.0f}".format(price).replace(",", " ")  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã

    for i in range (1, 30 + 1):

        print("SBER attempt #", i, " for USER ", user, sep='')

        suitable_transactions = driver.find_elements('xpath', f'//*[contains(@class, "region-operations") and @color="green" and text()="+{str(formatted_price)} "]')  # –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –°–£–ú–ú–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

        if suitable_transactions:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –°–£–ú–ú–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

            for j in range (len(suitable_transactions)):  # –ü—Ä–æ—Ö–æ–¥ –ø–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º

                suitable_transactions = driver.find_elements('xpath', f'//*[contains(@class, "region-operations") and @color="green" and text()="+{str(formatted_price)} "]')

                suitable_transactions[j].click()
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable(("xpath", '//h3[text()="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"]')))
                time.sleep(3)

                page = str(driver.page_source)
                page = page[page.find('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'):]
                page = BeautifulSoup(page, 'lxml')

                class_pattern = re.compile("operations-details")
                transaction_date = page.find('p', class_=class_pattern, attrs={"font-weight": "regular"}).text.split()  # –î–ê–¢–ê –ø–ª–∞—Ç–µ–∂–∞

                # –î–ï–ù–¨ –∏ –í–†–ï–ú–Ø –ø–ª–∞—Ç–µ–∂–∞
                transaction_day = transaction_date[0] + '.' + getMonthNumber(transaction_date[1]) + '.' + transaction_date[2]  # –î–ï–ù–¨ –ø–ª–∞—Ç–µ–∂–∞
                transaction_time = transaction_date[4]  # –í–†–ï–ú–Ø –ø–ª–∞—Ç–µ–∂–∞

                if (start_time - datetime.strptime(transaction_day + ':' + transaction_time, '%d.%m.%Y:%H:%M')).seconds < 900:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç
                    return user, True
                # # ---------- LOGGING ----------
                # else:
                #     print("OLD TRANSACTION")
                # # ---------- LOGGING ----------

                driver.back()  # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable(("xpath", '//span[@class="scaffold__region-header-link-full"]')))  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                time.sleep(5)

        # # ---------- LOGGING ----------
        # else:
        #     print("NO SUITABLE TRANSACTIONS")
        # # ---------- LOGGING ----------

        time.sleep(30)  # –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        driver.refresh()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(("xpath", '//span[@class="scaffold__region-header-link-full"]')))  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        time.sleep(5)

    driver.close()
    driver.quit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã QIWI [‚úÖ]
def checkQIWI(user, price):

    start_time = datetime.now() - timedelta(hours=1)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö

    wallet = python_qiwi.QiwiW–∞llet(configure.qiwi_phone, configure.qiwi_token)

    for i in range (1, 60 + 1):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç

        print("QIWI attempt #", i, " for USER ", user, sep='')
        history = wallet.payment_history(rows_num=10)  # –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π

        for t in history['data']:

            if t['status'] == 'SUCCESS' and t['type'] == 'IN':  # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ

                if t['sum']['amount'] == price and t['sum']['currency'] == 643:  # –ï—Å–ª–∏ –°–£–ú–ú–ê –∏ –í–ê–õ–Æ–¢–ê –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥—Ö–æ–¥—è—Ç

                    transaction_time = datetime.strptime(t['date'][:t['date'].find('+')].replace('T', ' '), '%Y-%m-%d %H:%M:%S')  # –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞

                    if (start_time - transaction_time).seconds < 900:  # –ï—Å–ª–∏ –í–†–ï–ú–Ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç
                        return user, True

        time.sleep(15)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã USDT [–ù–ï –ù–ê–ß–ê–õ]
def checkUSDT(user, price):

    start_time = datetime.now()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    client = Client(configure.binance_token, configure.binance_secret)

    for i in range (1, 60 + 1):

        print("USDT attempt #", i, " for USER ", user, sep='')
        history = client.get_deposit_history()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

        for transaction in history:
            if str(transaction['amount']) == str(price) and transaction['coin'] == 'USDT' and transaction['confirmTimes'] == '1/1':  # –ï—Å–ª–∏ –°–£–ú–ú–ê, –°–¢–ê–¢–£–° –∏ –í–ê–õ–Æ–¢–ê –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥—Ö–æ–¥—è—Ç
                if (start_time - datetime.fromtimestamp(transaction['insertTime'] / 1000)).seconds < 900:  # –ï—Å–ª–∏ –í–†–ï–ú–Ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç
                    return user, True

        time.sleep(15)


checkUSDT(12345, 63.08)
