import configure
import python_qiwi
from datetime import datetime, timedelta
import time
from ucBrowser import createBrowserUC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import re


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã TINKOFF [–í –†–ê–ë–û–¢–ï üößÔ∏è]
def checkTinkoff(user, price):  # –í –†–ê–ó–†–ê–ë–û–¢–ö–ï

    driver = createBrowserUC(enableProxy=False)
    driver.get("https://www.tinkoff.ru/events/feed/")  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π Tinkoff

    # time.sleep(10)

    input('next?')

    page = driver.page_source
    page = BeautifulSoup(page, 'lxml')
    print(page)

    driver.close()
    driver.quit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã SBER [–í –†–ê–ë–û–¢–ï üöß]
def checkSber(user, price):

    # –í—Ö–æ–¥ —Å –°–ë–ï–†–ë–ê–ù–ö –û–ù–õ–ê–ô–ù
    driver = createBrowserUC(enableProxy=False)
    driver.get("https://online.sberbank.ru/")  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –õ–ö –°–±–µ—Ä–±–∞–Ω–∫

    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(("xpath", '//button[@data-testid="button-continue"]')))  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞

    driver.find_element('xpath', '//input[@name="login"]').send_keys(configure.sber_login)  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –õ–û–ì–ò–ù–ê
    time.sleep(1)

    driver.find_element('xpath', '//input[@name="password"]').send_keys(configure.sber_password)  # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ü–ê–†–û–õ–Ø
    time.sleep(1)

    driver.find_element('xpath', '//button[@data-testid="button-continue"]').click()  # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞

    # –ü—Ä–æ–ø—É—Å–∫ –ª–∏—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
    pass

    WebDriverWait(driver, 10).until(EC.element_to_be_clickable(("xpath", '//span[@class="scaffold__region-header-link-full"]')))  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    time.sleep(5)

    page = driver.page_source

    driver.close()
    driver.quit()

    # # ---------- TESTING ----------
    # file = open('testPage.txt', 'r')
    # page = file.read()
    # page = BeautifulSoup(page, 'lxml')
    # file.close()
    # # ---------- TESTING ----------

    page = str(page)

    # –û—Ç—Å–µ—á–µ–Ω–∏–µ –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = page[page.find('<div class="region-operations'):]
    page = BeautifulSoup(page, 'lxml')

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    class_pattern = re.compile("region-operations")  # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    history = page.find_all('p', class_=class_pattern, attrs={"color": "green"})  # –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π

    for t in history:
        print(t.text, '\n')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã QIWI [‚úÖ]
def checkQIWI(user, price):

    start_time = str(datetime.now() - timedelta(hours=1))  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö
    now_day = start_time[:start_time.find(' ')]  # –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å
    now_time = start_time[start_time.find(' ') + 1:start_time.find('.')]  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    wallet = python_qiwi.QiwiW–∞llet(configure.qiwi_phone, configure.qiwi_token)

    for i in range (1, 60 + 1):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç

        print("QIWI ATTEMPT #", i, " for USER ", user, sep='')
        history = wallet.payment_history()  # –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π

        for t in history['data']:

            if t['statusText'] == 'Success':  # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ

                date = str(t['date'])
                transaction_day = date[:date.find('T')]  # –î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
                transaction_time = date[date.find('T') + 1:date.find('+')]  # –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞

                # print(transaction_day, now_day)
                # print(transaction_time, now_time, (datetime.strptime(now_time, '%H:%M:%S') - datetime.strptime(transaction_time, '%H:%M:%S')).seconds)
                # print(price, t['sum']['amount'])
                # print(643, t['sum']['currency'], '\n')

                if transaction_day == now_day and (datetime.strptime(now_time, '%H:%M:%S') - datetime.strptime(transaction_time, '%H:%M:%S')).seconds < 900:  # –ï—Å–ª–∏ –î–ï–ù–¨ –∏ –í–†–ï–ú–Ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥—Ö–æ–¥—è—Ç
                    if str(t['sum']['amount']) == price and t['sum']['currency'] == 643:  # –ï—Å–ª–∏ –°–£–ú–ú–ê –∏ –í–ê–õ–Æ–¢–ê –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥—Ö–æ–¥—è—Ç
                        return user, True

        time.sleep(15)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã USDT [–ù–ï –ù–ê–ß–ê–õ]
def checkUSDT(user, price):
    pass


checkSber('', '')
